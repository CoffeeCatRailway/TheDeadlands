buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version '5.2.0'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = "${project.version}-${project.mcVersion}"
group = project.group + '.' + project.modId
archivesBaseName = project.modId

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: project.mcpChannel.toString(), version: project.mcpMappings.toString()

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            mods {
                tdeadlands {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            mods {
                tdeadlands {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'

            args '--mod', '' + project.modId, '--all', '--output', '"' + rootProject.file('src/generated/resources/') + '"', '--existing', '"' + rootProject.file('src/main/resources') + '"'

            mods {
                tdeadlands {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

configurations {
    shade
}

repositories {
    jcenter()
    mavenLocal()

    maven { // JustEnoughItems
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven { // Registrate
        name 'tterrag maven'
        url "https://maven.tterrag.com/"
    }
    maven { // FishLib
        name = "Jitpack"
        url = "https://jitpack.io"
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${project.mcVersion}-${project.forgeVersion}"

    runtimeOnly fg.deobf("mezz.jei:jei-${project.jeiVersion}")
    compileOnly fg.deobf("mezz.jei:jei-${project.jeiVersion}:api")

    def registrate = "com.tterrag.registrate:Registrate:MC${project.registrateVersion}"
    implementation fg.deobf(registrate)
    shade registrate

    runtimeOnly fg.deobf("com.github.Ocelot5836:Sonar:${project.sonar}")
    compileOnly "com.github.Ocelot5836:Sonar:${project.sonar}"
    shade "com.github.Ocelot5836:Sonar:${project.sonar}"
}

shadowJar {
    configurations = [project.configurations.shade]
    relocate 'com.tterrag.registrate', 'coffeecatrailway.repack.registrate'
    relocate 'io.github.ocelot', 'io.github.ocelot.lib'
}

processResources {
    inputs.property("version", version)
    inputs.property("modId", project.modId)
    inputs.property("name", project.name)
    inputs.property("author", project.author)
    inputs.property("mcVersion", mcVersion)
    from(sourceSets.main.resources.srcDirs) {
        include 'META-INF/mods.toml'
        expand 'version': version, 'modId': project.modId, 'name': project.name, 'author': project.author, 'mcVersion': project.mcVersion
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'META-INF/mods.toml'
    }
}

jar {
    sourceSets {
        main {
            java {
                exclude '**.bbmodel'
            }
        }
    }

    manifest {
        attributes([
                "Specification-Title"     : "${archivesBaseName}",
                "Specification-Vendor"    : "${project.author}",
                "Specification-Version"   : "${project.version}",
                "Implementation-Title"    : "${project.name}",
                "Implementation-Version"  : "${project.version}",
                "Implementation-Vendor"   : "${project.author}",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
    enabled = false
    dependsOn(shadowJar { classifier = null })
}

jar.finalizedBy('reobfJar')
